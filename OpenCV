
# import cv2
# cap = cv2.VideoCapture("Images/Please login.mp4")
# delay = 20

# while True:
#     ret, frame = cap.read()
#     cv2.imshow('Video', frame)
#     if cv2.waitKey(delay) & 0xFF == ord('q'):
#         break

# cap.release()
# cv2.destroyAllWindows()

import cv2
import numpy as np

def main_face():
    background = cv2.VideoCapture("Images/LoginBack.mp4")
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    cap = cv2.VideoCapture(0)

    ret, bg_frame = background.read()
    bg_height, bg_width, _ = bg_frame.shape

    video_width = bg_width // 3 + 130
    video_height = bg_height // 2
    x_offset = (bg_width - video_width) // 2
    y_offset = (bg_height - video_height) // 2

    mask = np.zeros((video_height, video_width), dtype=np.uint8)
    center = (video_width // 2, video_height // 2)
    radius = min(center) + 120
    cv2.circle(mask, center, radius, (255), thickness=-1)

    while True:
        ret, frame = cap.read()
        # Rectangle
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
            
        resized_frame = cv2.resize(frame, (video_width, video_height))
        ret, bg_frame = background.read()
        combined_image = bg_frame.copy()
        masked_frame = cv2.bitwise_and(resized_frame, resized_frame, mask=mask)
        mask_inv = cv2.bitwise_not(mask)
        #Making the camera in circle
        bg_area = cv2.bitwise_and(combined_image[y_offset:y_offset+video_height, x_offset:x_offset+video_width], 
                                combined_image[y_offset:y_offset+video_height, x_offset:x_offset+video_width], 
                                mask=mask_inv)
        combined_image[y_offset:y_offset+video_height, x_offset:x_offset+video_width] = cv2.add(bg_area, masked_frame)
        cv2.imshow('Video in Background', combined_image)
        if cv2.waitKey(100) & 0xFF == ord('q'):
            break

    cap.release()
    background.release()
    cv2.destroyAllWindows()
#main_face()
